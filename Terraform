
* What is terraform? Why? 
- It is an IaC tool that can be used to deploy infrastructure and services in any supported provider platform. 
  It is a tool used to Create, update, and versioning infrastructure securely and efficiently. 

* What is Terraform init? 
- Terraform initializes the code using the command terraform init. This command is used to initialize the working directory containing terraform configuration file.  
  Three operations will be performed in terraform init. 
     i.   Plugin installation
     ii.  Child module installation 
     iii. Backend initialization 

* How does terraform work? Lifecycle.  
- There are 4 stages in Terraform's lifecycle.  
   Terraform init: This is used in the initial stage, This command is used to run a working directory containing terraform configuration file. 
   Terraform Plan: This implements an execution strategy. 
   Terraform apply: The terraform apply command executes the actions proposed in a terraform plan. 
   Terraform destroy: The terraform destroy command terminates resources managed by your Terraform project. 

 * What are plugins and providers? 
 - Terraform is basically a third-party tool that can interact with any cloud platform and provisions the infra/resources. In the provider we define what type of platform 
   that we are dealing with to create our infra and depending on that terraform will install the plugins related to that when we initialize the terraform. Basically, 
   When we install Terraform it will have a basic Terraform tool and plugins will be installed depending on the provider that we are dealing with.  

* Tell me the scenario where you come across provisioners? 
- If we have the script or file in our local machine we can copy the file to the remote instance by using a file provisioner, 
  and if you want to install any application or modify the base image of the instance when you are creating the instance, then we can come across a remote provisioner.  

  Yes, I came across file and remote exec provisioners. Let me explain why we used provisioners, We have already written a custom shell script that is located in the 
  local system and which need to copy to remote server so here we used file provisioner and once the Instance is created remote exec provisioner will execute the 
  shell script on the instance.  
 
  There are 3 types of Provisioners: 
      i. File Provisioner:  
     ii. Local exec Provisioner: 
    iii. Remote exec Provisioner:  

* What are modules in Terraform? 
- Terraform module is a collection of standard configuration files in a dedicated directory. Terraform modules enclosed groups of resources 
   dedicated to one task, reducing the amount of code you have to develop for similar infrastructure components. 

* What happens when 2 people apply the terraform code together? How to overcome with the conflict in the terraform? 
- Basically, we are keeping our state file in the backend, we lock the state file. Whenever you lock the statefile, one process is going to be 
  running and another process is not allowed to perform any action. So if Statelock is going to be applied, So if two people triggering at a time 
  and who trigger the first and that will run, and then only it will run the next job.  

* Can we merge 2 different statefile? 
- No, That will impact the infra. You can use one state file and import the resources from another state file or you can use data. 

* Few challenges that came across while working with Terraform? 
-  i. we got a couple of minor incidences where the apps team is going to do some manual changes on the application side and we don’t know and all of a sudden if we perform 
     some actions on the terraform they lost their configuration, which they changed manually and we struggled to recall and retrieve those changes back.  
  ii. After deploying, sometimes a team will come and say that they need changes in naming convention or they need to do some property changes,  when you come up with 
      the function app, it has the dependencies with service plan, resource group, storage app. So it is all going to be impacted. So it was hectic to resolve such issues.  
  iii. Importing the manually created resources to the terraform code was a bit challenging. Because when we import we can see a lot of unwanted default parameters will be 
       there in the code. We are deploying the terraform using minimal parameters and segregating the imported code will be time-consuming. 

* Let's assume 2 resources you are creating using Terraform, but we need to make sure once 1st resource is created successfully then only need to 
  start creating 2nd resource, Is this possible? 
- Yes, You have to come up with Depends_on in the resource. So when you use depends_on on the first resource, then the second resource will be 
  created only after the creation of the first resource. 

* What is terraform Statefile? 
- Terraform state: Terraform keeps track of the resources that are created in a statefile. This file contains all the information that Terraform 
  requires to update and delete infrastructure. 

* What are the best practices in Terraform? 
-  1. Make your application code into the modules, So that it is easy to maintain the code. 
   2. Instead of writing complex code write in a minimalistic way to define the resources.  
   3. Always maintain stable code in the proper branch. 
   4. Always Keep Statefile in the Remote backend,  
   5. Don’t give all the permission to terraform to perform resource actions. Minimal permissions.  



Basic terraform command: 


provider "aws" {
region = "us-east-1"
secret_key = "12345qwert"
access_key = "12345qwer"

}

resource "aws_instance" "Myinstance" {
ami = "ami-12345qwert"
instance_type = "t2.micro"

}







  






